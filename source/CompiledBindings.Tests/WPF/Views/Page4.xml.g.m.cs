//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable

namespace WPFTest.Views
{
	[global::System.CodeDom.Compiler.GeneratedCode("CompiledBindings", null)]
	partial class Page4
	{
		private bool _generatedCodeInitialized;

		private void InitializeAfterConstructor()
		{
			if (_generatedCodeInitialized)
				return;

			_generatedCodeInitialized = true;


			this.DataContextChanged += this_DataContextChanged;
			if (this.DataContext is global::WPFTest.ViewModels.Page4ViewModel dataRoot0)
			{
				Bindings_this.Initialize(this, dataRoot0);
			}
		}

		private void this_DataContextChanged(object sender, global::System.Windows.DependencyPropertyChangedEventArgs e)
		{
			Bindings_this.Cleanup();
			if (((global::System.Windows.FrameworkElement)sender).DataContext is global::WPFTest.ViewModels.Page4ViewModel dataRoot)
			{
				Bindings_this.Initialize(this, dataRoot);
			}
		}

		Page4_Bindings_this Bindings_this = new Page4_Bindings_this();

		class Page4_Bindings_this
		{
			Page4 _targetRoot;
			global::WPFTest.ViewModels.Page4ViewModel _dataRoot;
			Page4_BindingsTrackings_this _bindingsTrackings;
			bool _settingBinding0;
			bool _settingBinding1;
			bool _settingBinding2;

			public void Initialize(Page4 targetRoot, global::WPFTest.ViewModels.Page4ViewModel dataRoot)
			{
				_targetRoot = targetRoot;
				_dataRoot = dataRoot;
				_bindingsTrackings = new Page4_BindingsTrackings_this(this);

				Update();

				_bindingsTrackings.SetPropertyChangedEventHandler0(dataRoot);

				global::System.ComponentModel.DependencyPropertyDescriptor
					.FromProperty(
						global::System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty,
						typeof(global::System.Windows.Controls.Primitives.ToggleButton))
					.AddValueChanged(_targetRoot.checkBox1, OnTargetChanged0);
				global::System.ComponentModel.DependencyPropertyDescriptor
					.FromProperty(
						global::System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty,
						typeof(global::System.Windows.Controls.Primitives.ToggleButton))
					.AddValueChanged(_targetRoot.checkBox2, OnTargetChanged1);
				global::System.ComponentModel.DependencyPropertyDescriptor
					.FromProperty(
						global::System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty,
						typeof(global::System.Windows.Controls.Primitives.ToggleButton))
					.AddValueChanged(_targetRoot.checkBox3, OnTargetChanged2);
			}

			public void Cleanup()
			{
				if (_targetRoot != null)
				{
					global::System.ComponentModel.DependencyPropertyDescriptor
						.FromProperty(
							global::System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty,
							typeof(global::System.Windows.Controls.Primitives.ToggleButton))
						.RemoveValueChanged(_targetRoot.checkBox1, OnTargetChanged0);
					global::System.ComponentModel.DependencyPropertyDescriptor
						.FromProperty(
							global::System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty,
							typeof(global::System.Windows.Controls.Primitives.ToggleButton))
						.RemoveValueChanged(_targetRoot.checkBox2, OnTargetChanged1);
					global::System.ComponentModel.DependencyPropertyDescriptor
						.FromProperty(
							global::System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty,
							typeof(global::System.Windows.Controls.Primitives.ToggleButton))
						.RemoveValueChanged(_targetRoot.checkBox3, OnTargetChanged2);
					_bindingsTrackings.Cleanup();
					_dataRoot = null;
					_targetRoot = null;
				}
			}

			public void Update()
			{
				var dataRoot = _dataRoot;
				Update0(dataRoot);
			}

			private void Update0(global::WPFTest.ViewModels.Page4ViewModel value)
			{
#line (17, 13) - (17, 91) 17 "Page4.xml"
				var value1 = value.SubViewModel2;
#line (17, 13) - (17, 91) 17 "Page4.xml"
				var value2 = value1.SubSubViewModel;
#line (17, 13) - (17, 91) 17 "Page4.xml"
				var value3 = value2.IsEditingSubSub;
#line default
				if (!object.Equals(_targetRoot.checkBox3.IsChecked, value3))
				{
					_settingBinding2 = true;
					try
					{
#line (17, 13) - (17, 91) 17 "Page4.xml"
						_targetRoot.checkBox3.IsChecked = value3;
#line default
					}
					finally
					{
						_settingBinding2 = false;
					}
				}
				Update0_SubViewModel(value);
				_bindingsTrackings.SetPropertyChangedEventHandler4(value2);
				_bindingsTrackings.SetPropertyChangedEventHandler3(value1);
			}

			private void Update1(global::WPFTest.ViewModels.SubViewModel value)
			{
#line (16, 13) - (16, 90) 16 "Page4.xml"
				var value1 = value.SubSubViewModel;
#line (16, 13) - (16, 90) 16 "Page4.xml"
				var value2 = value1.IsEditingSubSub;
#line default
				if (!object.Equals(_targetRoot.checkBox2.IsChecked, value2))
				{
					_settingBinding1 = true;
					try
					{
#line (16, 13) - (16, 90) 16 "Page4.xml"
						_targetRoot.checkBox2.IsChecked = value2;
#line default
					}
					finally
					{
						_settingBinding1 = false;
					}
				}
				Update1_IsEditingSub(value);
				_bindingsTrackings.SetPropertyChangedEventHandler2(value1);
			}

			private void Update0_SubViewModel(global::WPFTest.ViewModels.Page4ViewModel value)
			{
#line (15, 13) - (15, 71) 15 "Page4.xml"
				var value1 = value.SubViewModel;
#line default
				Update1(value1);
				_bindingsTrackings.SetPropertyChangedEventHandler1(value1);
			}

			private void Update0_SubViewModel2(global::WPFTest.ViewModels.Page4ViewModel value)
			{
#line (17, 13) - (17, 91) 17 "Page4.xml"
				var value1 = value.SubViewModel2;
#line default
				Update3_SubSubViewModel(value1);
				_bindingsTrackings.SetPropertyChangedEventHandler3(value1);
			}

			private void Update1_IsEditingSub(global::WPFTest.ViewModels.SubViewModel value)
			{
				var dataRoot = _dataRoot;
#line (15, 13) - (15, 71) 15 "Page4.xml"
				var value1 = value.IsEditingSub;
				if (!object.Equals(_targetRoot.checkBox1.IsChecked, value1))
				{
					_settingBinding0 = true;
					try
					{
#line (15, 13) - (15, 71) 15 "Page4.xml"
						_targetRoot.checkBox1.IsChecked = value1;
#line default
					}
					finally
					{
						_settingBinding0 = false;
					}
				}
#line (19, 14) - (19, 118) 19 "Page4.xml"
				_targetRoot.rectangle1.Opacity = (value1 && value.SubSubViewModel.IsEditingSubSub ? 1 : 0.2);
#line (20, 14) - (20, 119) 20 "Page4.xml"
				_targetRoot.rectangle2.Opacity = (value1 && dataRoot.SubViewModel2.SubSubViewModel.IsEditingSubSub ? 1 : 0.2);
#line default
			}

			private void Update1_SubSubViewModel(global::WPFTest.ViewModels.SubViewModel value)
			{
#line (16, 13) - (16, 90) 16 "Page4.xml"
				var value1 = value.SubSubViewModel;
#line default
				Update2_IsEditingSubSub(value1);
				_bindingsTrackings.SetPropertyChangedEventHandler2(value1);
			}

			private void Update2_IsEditingSubSub(global::WPFTest.ViewModels.SubSubViewModel value)
			{
				var dataRoot = _dataRoot;
#line (16, 13) - (16, 90) 16 "Page4.xml"
				var value1 = value.IsEditingSubSub;
				if (!object.Equals(_targetRoot.checkBox2.IsChecked, value1))
				{
					_settingBinding1 = true;
					try
					{
#line (16, 13) - (16, 90) 16 "Page4.xml"
						_targetRoot.checkBox2.IsChecked = value1;
#line default
					}
					finally
					{
						_settingBinding1 = false;
					}
				}
#line (19, 14) - (19, 118) 19 "Page4.xml"
				_targetRoot.rectangle1.Opacity = (dataRoot.SubViewModel.IsEditingSub && value1 ? 1 : 0.2);
#line default
			}

			private void Update3_SubSubViewModel(global::WPFTest.ViewModels.SubViewModel value)
			{
#line (17, 13) - (17, 91) 17 "Page4.xml"
				var value1 = value.SubSubViewModel;
#line default
				Update4_IsEditingSubSub(value1);
				_bindingsTrackings.SetPropertyChangedEventHandler4(value1);
			}

			private void Update4_IsEditingSubSub(global::WPFTest.ViewModels.SubSubViewModel value)
			{
				var dataRoot = _dataRoot;
#line (17, 13) - (17, 91) 17 "Page4.xml"
				var value1 = value.IsEditingSubSub;
				if (!object.Equals(_targetRoot.checkBox3.IsChecked, value1))
				{
					_settingBinding2 = true;
					try
					{
#line (17, 13) - (17, 91) 17 "Page4.xml"
						_targetRoot.checkBox3.IsChecked = value1;
#line default
					}
					finally
					{
						_settingBinding2 = false;
					}
				}
#line (20, 14) - (20, 119) 20 "Page4.xml"
				_targetRoot.rectangle2.Opacity = (dataRoot.SubViewModel.IsEditingSub && value1 ? 1 : 0.2);
#line default
			}

			private void OnTargetChanged0(object sender, global::System.EventArgs e)
			{
				var dataRoot = _dataRoot;
				if (!_settingBinding0)
				{
					try
					{
#line (15, 13) - (15, 71) 15 "Page4.xml"
						dataRoot.SubViewModel.IsEditingSub = _targetRoot.checkBox1.IsChecked ?? default;
#line default
					}
					catch
					{
					}
				}
			}

			private void OnTargetChanged1(object sender, global::System.EventArgs e)
			{
				var dataRoot = _dataRoot;
				if (!_settingBinding1)
				{
					try
					{
#line (16, 13) - (16, 90) 16 "Page4.xml"
						dataRoot.SubViewModel.SubSubViewModel.IsEditingSubSub = _targetRoot.checkBox2.IsChecked ?? default;
#line default
					}
					catch
					{
					}
				}
			}

			private void OnTargetChanged2(object sender, global::System.EventArgs e)
			{
				var dataRoot = _dataRoot;
				if (!_settingBinding2)
				{
					try
					{
#line (17, 13) - (17, 91) 17 "Page4.xml"
						dataRoot.SubViewModel2.SubSubViewModel.IsEditingSubSub = _targetRoot.checkBox3.IsChecked ?? default;
#line default
					}
					catch
					{
					}
				}
			}

			class Page4_BindingsTrackings_this
			{
				global::System.WeakReference _bindingsWeakRef;
				global::System.ComponentModel.INotifyPropertyChanged _propertyChangeSource0;
				global::System.ComponentModel.INotifyPropertyChanged _propertyChangeSource1;
				global::System.ComponentModel.INotifyPropertyChanged _propertyChangeSource2;
				global::System.ComponentModel.INotifyPropertyChanged _propertyChangeSource3;
				global::System.ComponentModel.INotifyPropertyChanged _propertyChangeSource4;

				public Page4_BindingsTrackings_this(Page4_Bindings_this bindings)
				{
					_bindingsWeakRef = new global::System.WeakReference(bindings);
				}

				public void Cleanup()
				{
					SetPropertyChangedEventHandler0(null);
					SetPropertyChangedEventHandler1(null);
					SetPropertyChangedEventHandler2(null);
					SetPropertyChangedEventHandler3(null);
					SetPropertyChangedEventHandler4(null);
				}

				public void SetPropertyChangedEventHandler0(global::WPFTest.ViewModels.Page4ViewModel value)
				{
					global::CompiledBindings.WPF.CompiledBindingsHelper.SetPropertyChangedEventHandler(ref _propertyChangeSource0, value, OnPropertyChanged0);
				}

				public void SetPropertyChangedEventHandler1(global::WPFTest.ViewModels.SubViewModel value)
				{
					global::CompiledBindings.WPF.CompiledBindingsHelper.SetPropertyChangedEventHandler(ref _propertyChangeSource1, value, OnPropertyChanged1);
				}

				public void SetPropertyChangedEventHandler2(global::WPFTest.ViewModels.SubSubViewModel value)
				{
					global::CompiledBindings.WPF.CompiledBindingsHelper.SetPropertyChangedEventHandler(ref _propertyChangeSource2, value, OnPropertyChanged2);
				}

				public void SetPropertyChangedEventHandler3(global::WPFTest.ViewModels.SubViewModel value)
				{
					global::CompiledBindings.WPF.CompiledBindingsHelper.SetPropertyChangedEventHandler(ref _propertyChangeSource3, value, OnPropertyChanged3);
				}

				public void SetPropertyChangedEventHandler4(global::WPFTest.ViewModels.SubSubViewModel value)
				{
					global::CompiledBindings.WPF.CompiledBindingsHelper.SetPropertyChangedEventHandler(ref _propertyChangeSource4, value, OnPropertyChanged4);
				}

				private void OnPropertyChanged0(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
				{
					var bindings = global::CompiledBindings.WPF.CompiledBindingsHelper.TryGetBindings<Page4_Bindings_this>(ref _bindingsWeakRef, Cleanup);
					if (bindings == null)
					{
						return;
					}

					var typedSender = (global::WPFTest.ViewModels.Page4ViewModel)sender;
					switch (e.PropertyName)
					{
						case null:
						case "":
							bindings.Update0(typedSender);
							break;
						case "SubViewModel":
							bindings.Update0_SubViewModel(typedSender);
							break;
						case "SubViewModel2":
							bindings.Update0_SubViewModel2(typedSender);
							break;
					}
				}

				private void OnPropertyChanged1(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
				{
					var bindings = global::CompiledBindings.WPF.CompiledBindingsHelper.TryGetBindings<Page4_Bindings_this>(ref _bindingsWeakRef, Cleanup);
					if (bindings == null)
					{
						return;
					}

					var typedSender = (global::WPFTest.ViewModels.SubViewModel)sender;
					switch (e.PropertyName)
					{
						case null:
						case "":
							bindings.Update1(typedSender);
							break;
						case "IsEditingSub":
							bindings.Update1_IsEditingSub(typedSender);
							break;
						case "SubSubViewModel":
							bindings.Update1_SubSubViewModel(typedSender);
							break;
					}
				}

				private void OnPropertyChanged2(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
				{
					var bindings = global::CompiledBindings.WPF.CompiledBindingsHelper.TryGetBindings<Page4_Bindings_this>(ref _bindingsWeakRef, Cleanup);
					if (bindings == null)
					{
						return;
					}

					var typedSender = (global::WPFTest.ViewModels.SubSubViewModel)sender;
					if (string.IsNullOrEmpty(e.PropertyName) || e.PropertyName == "IsEditingSubSub")
					{
						bindings.Update2_IsEditingSubSub(typedSender);
					}
				}

				private void OnPropertyChanged3(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
				{
					var bindings = global::CompiledBindings.WPF.CompiledBindingsHelper.TryGetBindings<Page4_Bindings_this>(ref _bindingsWeakRef, Cleanup);
					if (bindings == null)
					{
						return;
					}

					var typedSender = (global::WPFTest.ViewModels.SubViewModel)sender;
					if (string.IsNullOrEmpty(e.PropertyName) || e.PropertyName == "SubSubViewModel")
					{
						bindings.Update3_SubSubViewModel(typedSender);
					}
				}

				private void OnPropertyChanged4(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
				{
					var bindings = global::CompiledBindings.WPF.CompiledBindingsHelper.TryGetBindings<Page4_Bindings_this>(ref _bindingsWeakRef, Cleanup);
					if (bindings == null)
					{
						return;
					}

					var typedSender = (global::WPFTest.ViewModels.SubSubViewModel)sender;
					if (string.IsNullOrEmpty(e.PropertyName) || e.PropertyName == "IsEditingSubSub")
					{
						bindings.Update4_IsEditingSubSub(typedSender);
					}
				}
			}
		}
	}
}
